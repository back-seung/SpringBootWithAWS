package com.seung.booboo.springboot.config.auth;import com.seung.booboo.springboot.domain.user.Role;import lombok.RequiredArgsConstructor;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.builders.WebSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;@RequiredArgsConstructor@EnableWebSecurity // 스프링 시큐리티 설정 활성화public class SecurityConfig extends WebSecurityConfigurerAdapter {    private final CustomOAuth2UserService customOAuth2UserService;    @Override    public void configure(HttpSecurity http) throws Exception {        http.csrf().disable().headers().frameOptions().disable() //h2-console 사용하기 위해 해당 옵션 disable                .and()                .authorizeRequests().antMatchers("/", "/css/**", "/images/**", "/js/**", "/h2-console/**", "/profile").permitAll()                // authorizeRequests() > URL 별 권한 관리 설정 옵션 시작점, 선언되야만 andMatchers 사용가능                .antMatchers("/api/v1/**").hasRole(Role.USER.name())                // andMathcer > 권한관리 대상 지정 URL, HTTP 별로 관리 가능                .anyRequest().authenticated()                // 그 외 URL은 인증된(로그인된) 유저만 사용 가능                .and()                .logout().logoutSuccessUrl("/")                // 로그아웃 성공시 url                .and()                .oauth2Login()                // oauth2 로그인 기능 설정의 진입점                .userInfoEndpoint()                // 사용자 정보를 가져올 때의 설정 담당                .userService(customOAuth2UserService);                // 로그인 성공시 후속 조치를 진행할 인터페이스의 구현체 등록함.    }}