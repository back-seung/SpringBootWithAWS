package com.seung.booboo.springboot.service.posts;import com.seung.booboo.springboot.domain.posts.Posts;import com.seung.booboo.springboot.domain.posts.PostsRepository;import com.seung.booboo.springboot.web.dto.PostsListResponseDto;import com.seung.booboo.springboot.web.dto.PostsResponseDto;import com.seung.booboo.springboot.web.dto.PostsSaveRequestDto;import com.seung.booboo.springboot.web.dto.PostsUpdateRequestDto;import lombok.RequiredArgsConstructor;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.List;import java.util.stream.Collectors;@RequiredArgsConstructor@Servicepublic class PostsService {    private final PostsRepository repository;    @Transactional    public Long save(PostsSaveRequestDto requestDto) {        return repository.save(requestDto.toEntity()).getId();    }    @Transactional    public Long update(Long id, PostsUpdateRequestDto requestDto) {        Posts posts = repository.findById(id)                .orElseThrow(() -> new IllegalArgumentException("해당 게시글이 없습니다. id=" + id));        posts.update(requestDto.getTitle(), requestDto.getContent());        return id;    }    public PostsResponseDto findById(Long id) {        Posts entity = repository.findById(id)                .orElseThrow(() -> new IllegalArgumentException("해당 게시글이 없습니다. id = " + id));        return new PostsResponseDto(entity);    }    @Transactional(readOnly = true) // ReadOnly를 사용하면 트랜잭션 범위는 유지하되 조회 기능만 남겨 조회속도를 개선시킨다.    public List<PostsListResponseDto> findAllDesc() {        return repository.findAllDesc().stream()                .map(PostsListResponseDto::new)                .collect(Collectors.toList());    }}