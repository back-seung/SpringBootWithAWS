buildscript {    ext { // build.gradle에서 사용하는 전역변수를 설정하겠다는 의미, springBootVersion = '2.1.7 '? 전역변수 = 버전        springBootVersion = '2.1.7.RELEASE'    }    repositories {        mavenCentral()        jcenter()    }    dependencies {        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") // ext의 전역변수를 의존성으로 받음    }}apply plugin: 'java'apply plugin: 'eclipse'apply plugin: 'org.springframework.boot'apply plugin: 'io.spring.dependency-management'// 위 4개의 플러그인은 스프링부트의 의존성을 관리해주는 플러그인 꼭 추가해야함repositories { // 각종 라이브러리들을 어떤 원격 저장소에서 받을지 정한다.    mavenCentral()    jcenter()}dependencies { // 프로젝트 개발에 필요한 라이브러리들을 선언하는 곳. 단, 특정버전을 명시하면 안됨. 버전을 명시하지 않아야만 위의 스프링부트 버전을 따라감.    compile('org.springframework.boot:spring-boot-starter-web')    compile('org.projectlombok:lombok')    compile('org.springframework.boot:spring-boot-starter-data-jpa') //  spring boot 버전에 맞춰 자동으로 JPA관련 라이브러리 버전을 관리해줌.    compile('com.h2database:h2') // 인메모리 관계형 DB, 별도 설치 X, 메모리 실행이기 때문에 App을 재시작할 때 마다 초기화된다는 점에서 테스트용으로 많이 사용.    compile('org.springframework.boot:spring-boot-starter-mustache') // 템플릿 엔진. need to View Layer    compile('org.springframework.boot:spring-boot-starter-oauth2-client') //로그인 등  클라이언트 입장에서 소셜 기능 구현시 필요한 의존성    compile('org.springframework.session:spring-session-jdbc')    compile('org.mariadb.jdbc:mariadb-java-client')    testCompile('org.springframework.boot:spring-boot-starter-test')    testCompile('org.springframework.security:spring-security-test')}